import { createComponent as y, Dynamic as m } from "solid-js/web";
import { mergeProps as x, createSignal as S, createEffect as b, untrack as w } from "solid-js";
const s = {
  padding: 0,
  border: 0,
  margin: 0
}, l = {
  display: "none",
  ...s
}, d = {
  "will-change": "height"
}, c = {
  overflow: "hidden",
  height: 0
}, u = typeof window < "u" ? requestAnimationFrame : () => {
}, v = (r) => {
  let e;
  const t = x({
    class: "",
    as: "div",
    value: !0,
    onCollapsed: () => {
    },
    onExpanded: () => {
    }
  }, r), [f, o] = S(t.value ? s : l);
  b((n) => {
    const a = t.value, h = typeof n < "u" && n !== a;
    return w(() => {
      h && requestAnimationFrame(() => {
        a ? (o({
          ...s,
          ...d,
          ...c
        }), u(() => {
          o((i) => ({
            ...i,
            ...g(e.scrollHeight)
          }));
        })) : (o((i) => ({
          ...i,
          ...d,
          ...g(e.scrollHeight)
        })), u(() => {
          o((i) => ({
            ...i,
            ...c
          }));
        }));
      });
    }), a;
  });
  function p(n) {
    n.target === e && n.propertyName === "height" && (t.value ? (e == null ? void 0 : e.scrollHeight) === parseFloat(n.target.style.height) && (o(s), t.onExpanded()) : (e == null ? void 0 : e.style.height) === "0px" && (o(l), t.onCollapsed()));
  }
  return y(m, {
    get style() {
      return f();
    },
    get id() {
      return t.id;
    },
    ref: (n) => e = n,
    get ["aria-labelledby"]() {
      return t["aria-labelledby"];
    },
    get role() {
      return t.role;
    },
    get component() {
      return t.as;
    },
    get class() {
      return t.class;
    },
    onTransitionEnd: p,
    get children() {
      return t.children;
    }
  });
};
function g(r = 0) {
  return {
    "--sc-auto-duration": `${C(r)}ms`,
    height: `${r}px`
  };
}
function C(r = 0) {
  if (r === 0)
    return 0;
  const e = r / 36;
  return Math.round((4 + 15 * e ** 0.25 + e / 5) * 10);
}
export {
  v as Collapse
};
